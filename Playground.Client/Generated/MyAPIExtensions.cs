// Code generated by Microsoft (R) AutoRest Code Generator 1.2.2.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Playground.Client.Generated
{
    using Models;
    using Playground.Client;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for MyAPI.
    /// </summary>
    public static partial class MyAPIExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='password'>
            /// </param>
            public static void AccountLoginPost(this IMyAPI operations, string userName = default(string), string password = default(string))
            {
                operations.AccountLoginPostAsync(userName, password).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='password'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AccountLoginPostAsync(this IMyAPI operations, string userName = default(string), string password = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AccountLoginPostWithHttpMessagesAsync(userName, password, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='password'>
            /// </param>
            public static void AccountRegisterPost(this IMyAPI operations, string userName = default(string), string password = default(string))
            {
                operations.AccountRegisterPostAsync(userName, password).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='password'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AccountRegisterPostAsync(this IMyAPI operations, string userName = default(string), string password = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AccountRegisterPostWithHttpMessagesAsync(userName, password, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void AccountPost(this IMyAPI operations)
            {
                operations.AccountPostAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AccountPostAsync(this IMyAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AccountPostWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accessToken'>
            /// </param>
            /// <param name='acrValues'>
            /// </param>
            /// <param name='assertion'>
            /// </param>
            /// <param name='claims'>
            /// </param>
            /// <param name='claimsLocales'>
            /// </param>
            /// <param name='clientAssertion'>
            /// </param>
            /// <param name='clientAssertionType'>
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='clientSecret'>
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='codeChallenge'>
            /// </param>
            /// <param name='codeChallengeMethod'>
            /// </param>
            /// <param name='codeVerifier'>
            /// </param>
            /// <param name='display'>
            /// </param>
            /// <param name='grantType'>
            /// </param>
            /// <param name='identityProvider'>
            /// </param>
            /// <param name='idTokenHint'>
            /// </param>
            /// <param name='loginHint'>
            /// </param>
            /// <param name='maxAge'>
            /// </param>
            /// <param name='nonce'>
            /// </param>
            /// <param name='password'>
            /// </param>
            /// <param name='postLogoutRedirectUri'>
            /// </param>
            /// <param name='prompt'>
            /// </param>
            /// <param name='redirectUri'>
            /// </param>
            /// <param name='refreshToken'>
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='requestId'>
            /// </param>
            /// <param name='requestUri'>
            /// </param>
            /// <param name='resource'>
            /// </param>
            /// <param name='responseMode'>
            /// </param>
            /// <param name='responseType'>
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='state'>
            /// </param>
            /// <param name='token'>
            /// </param>
            /// <param name='tokenTypeHint'>
            /// </param>
            /// <param name='registration'>
            /// </param>
            /// <param name='uiLocales'>
            /// </param>
            /// <param name='username'>
            /// </param>
            public static void ConnectTokenPost(this IMyAPI operations, string accessToken = default(string), string acrValues = default(string), string assertion = default(string), object claims = default(object), string claimsLocales = default(string), string clientAssertion = default(string), string clientAssertionType = default(string), string clientId = default(string), string clientSecret = default(string), string code = default(string), string codeChallenge = default(string), string codeChallengeMethod = default(string), string codeVerifier = default(string), string display = default(string), string grantType = default(string), string identityProvider = default(string), string idTokenHint = default(string), string loginHint = default(string), long? maxAge = default(long?), string nonce = default(string), string password = default(string), string postLogoutRedirectUri = default(string), string prompt = default(string), string redirectUri = default(string), string refreshToken = default(string), string request = default(string), string requestId = default(string), string requestUri = default(string), string resource = default(string), string responseMode = default(string), string responseType = default(string), string scope = default(string), string state = default(string), string token = default(string), string tokenTypeHint = default(string), object registration = default(object), string uiLocales = default(string), string username = default(string))
            {
                operations.ConnectTokenPostAsync(accessToken, acrValues, assertion, claims, claimsLocales, clientAssertion, clientAssertionType, clientId, clientSecret, code, codeChallenge, codeChallengeMethod, codeVerifier, display, grantType, identityProvider, idTokenHint, loginHint, maxAge, nonce, password, postLogoutRedirectUri, prompt, redirectUri, refreshToken, request, requestId, requestUri, resource, responseMode, responseType, scope, state, token, tokenTypeHint, registration, uiLocales, username).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accessToken'>
            /// </param>
            /// <param name='acrValues'>
            /// </param>
            /// <param name='assertion'>
            /// </param>
            /// <param name='claims'>
            /// </param>
            /// <param name='claimsLocales'>
            /// </param>
            /// <param name='clientAssertion'>
            /// </param>
            /// <param name='clientAssertionType'>
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='clientSecret'>
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='codeChallenge'>
            /// </param>
            /// <param name='codeChallengeMethod'>
            /// </param>
            /// <param name='codeVerifier'>
            /// </param>
            /// <param name='display'>
            /// </param>
            /// <param name='grantType'>
            /// </param>
            /// <param name='identityProvider'>
            /// </param>
            /// <param name='idTokenHint'>
            /// </param>
            /// <param name='loginHint'>
            /// </param>
            /// <param name='maxAge'>
            /// </param>
            /// <param name='nonce'>
            /// </param>
            /// <param name='password'>
            /// </param>
            /// <param name='postLogoutRedirectUri'>
            /// </param>
            /// <param name='prompt'>
            /// </param>
            /// <param name='redirectUri'>
            /// </param>
            /// <param name='refreshToken'>
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='requestId'>
            /// </param>
            /// <param name='requestUri'>
            /// </param>
            /// <param name='resource'>
            /// </param>
            /// <param name='responseMode'>
            /// </param>
            /// <param name='responseType'>
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='state'>
            /// </param>
            /// <param name='token'>
            /// </param>
            /// <param name='tokenTypeHint'>
            /// </param>
            /// <param name='registration'>
            /// </param>
            /// <param name='uiLocales'>
            /// </param>
            /// <param name='username'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ConnectTokenPostAsync(this IMyAPI operations, string accessToken = default(string), string acrValues = default(string), string assertion = default(string), object claims = default(object), string claimsLocales = default(string), string clientAssertion = default(string), string clientAssertionType = default(string), string clientId = default(string), string clientSecret = default(string), string code = default(string), string codeChallenge = default(string), string codeChallengeMethod = default(string), string codeVerifier = default(string), string display = default(string), string grantType = default(string), string identityProvider = default(string), string idTokenHint = default(string), string loginHint = default(string), long? maxAge = default(long?), string nonce = default(string), string password = default(string), string postLogoutRedirectUri = default(string), string prompt = default(string), string redirectUri = default(string), string refreshToken = default(string), string request = default(string), string requestId = default(string), string requestUri = default(string), string resource = default(string), string responseMode = default(string), string responseType = default(string), string scope = default(string), string state = default(string), string token = default(string), string tokenTypeHint = default(string), object registration = default(object), string uiLocales = default(string), string username = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ConnectTokenPostWithHttpMessagesAsync(accessToken, acrValues, assertion, claims, claimsLocales, clientAssertion, clientAssertionType, clientId, clientSecret, code, codeChallenge, codeChallengeMethod, codeVerifier, display, grantType, identityProvider, idTokenHint, loginHint, maxAge, nonce, password, postLogoutRedirectUri, prompt, redirectUri, refreshToken, request, requestId, requestUri, resource, responseMode, responseType, scope, state, token, tokenTypeHint, registration, uiLocales, username, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Company> ApiCompaniesGet(this IMyAPI operations)
            {
                return operations.ApiCompaniesGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Company>> ApiCompaniesGetAsync(this IMyAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiCompaniesGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='item'>
            /// </param>
            public static Company ApiCompaniesPost(this IMyAPI operations, Company item = default(Company))
            {
                return operations.ApiCompaniesPostAsync(item).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='item'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Company> ApiCompaniesPostAsync(this IMyAPI operations, Company item = default(Company), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiCompaniesPostWithHttpMessagesAsync(item, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<SiteViewModel> ApiCompaniesGetViewModelsGet(this IMyAPI operations)
            {
                return operations.ApiCompaniesGetViewModelsGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<SiteViewModel>> ApiCompaniesGetViewModelsGetAsync(this IMyAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiCompaniesGetViewModelsGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            public static Company ApiCompaniesByKeyGet(this IMyAPI operations, int key)
            {
                return operations.ApiCompaniesByKeyGetAsync(key).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Company> ApiCompaniesByKeyGetAsync(this IMyAPI operations, int key, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiCompaniesByKeyGetWithHttpMessagesAsync(key, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='key1'>
            /// </param>
            public static void ApiCompaniesByKeyDelete(this IMyAPI operations, int key, string key1)
            {
                operations.ApiCompaniesByKeyDeleteAsync(key, key1).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='key1'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiCompaniesByKeyDeleteAsync(this IMyAPI operations, int key, string key1, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiCompaniesByKeyDeleteWithHttpMessagesAsync(key, key1, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='key1'>
            /// </param>
            /// <param name='patch'>
            /// </param>
            public static Company ApiCompaniesByKeyPatch(this IMyAPI operations, int key, string key1, IList<Operation> patch = default(IList<Operation>))
            {
                return operations.ApiCompaniesByKeyPatchAsync(key, key1, patch).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='key1'>
            /// </param>
            /// <param name='patch'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Company> ApiCompaniesByKeyPatchAsync(this IMyAPI operations, int key, string key1, IList<Operation> patch = default(IList<Operation>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiCompaniesByKeyPatchWithHttpMessagesAsync(key, key1, patch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            public static IList<Site> ApiCompaniesByKeySitesGet(this IMyAPI operations, int key)
            {
                return operations.ApiCompaniesByKeySitesGetAsync(key).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Site>> ApiCompaniesByKeySitesGetAsync(this IMyAPI operations, int key, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiCompaniesByKeySitesGetWithHttpMessagesAsync(key, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Site> ApiSitesGet(this IMyAPI operations)
            {
                return operations.ApiSitesGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Site>> ApiSitesGetAsync(this IMyAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiSitesGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='item'>
            /// </param>
            public static Site ApiSitesPost(this IMyAPI operations, Site item = default(Site))
            {
                return operations.ApiSitesPostAsync(item).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='item'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Site> ApiSitesPostAsync(this IMyAPI operations, Site item = default(Site), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiSitesPostWithHttpMessagesAsync(item, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='key1'>
            /// </param>
            public static Site ApiSitesByKeyGet(this IMyAPI operations, int key, string key1)
            {
                return operations.ApiSitesByKeyGetAsync(key, key1).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='key1'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Site> ApiSitesByKeyGetAsync(this IMyAPI operations, int key, string key1, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiSitesByKeyGetWithHttpMessagesAsync(key, key1, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='key1'>
            /// </param>
            public static void ApiSitesByKeyDelete(this IMyAPI operations, int key, string key1)
            {
                operations.ApiSitesByKeyDeleteAsync(key, key1).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='key1'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiSitesByKeyDeleteAsync(this IMyAPI operations, int key, string key1, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiSitesByKeyDeleteWithHttpMessagesAsync(key, key1, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='key1'>
            /// </param>
            /// <param name='patch'>
            /// </param>
            public static Site ApiSitesByKeyPatch(this IMyAPI operations, int key, string key1, IList<Operation> patch = default(IList<Operation>))
            {
                return operations.ApiSitesByKeyPatchAsync(key, key1, patch).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='key1'>
            /// </param>
            /// <param name='patch'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Site> ApiSitesByKeyPatchAsync(this IMyAPI operations, int key, string key1, IList<Operation> patch = default(IList<Operation>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiSitesByKeyPatchWithHttpMessagesAsync(key, key1, patch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<string> ApiValuesGet(this IMyAPI operations)
            {
                return operations.ApiValuesGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> ApiValuesGetAsync(this IMyAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiValuesGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            public static void ApiValuesPost(this IMyAPI operations, string value = default(string))
            {
                operations.ApiValuesPostAsync(value).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiValuesPostAsync(this IMyAPI operations, string value = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiValuesPostWithHttpMessagesAsync(value, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static string ApiValuesByIdGet(this IMyAPI operations, int id)
            {
                return operations.ApiValuesByIdGetAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ApiValuesByIdGetAsync(this IMyAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiValuesByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='value'>
            /// </param>
            public static void ApiValuesByIdPut(this IMyAPI operations, int id, string value = default(string))
            {
                operations.ApiValuesByIdPutAsync(id, value).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiValuesByIdPutAsync(this IMyAPI operations, int id, string value = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiValuesByIdPutWithHttpMessagesAsync(id, value, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void ApiValuesByIdDelete(this IMyAPI operations, int id)
            {
                operations.ApiValuesByIdDeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiValuesByIdDeleteAsync(this IMyAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiValuesByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
